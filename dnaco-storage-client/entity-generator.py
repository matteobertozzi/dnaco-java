#!/usr/bin/env python3

from collections import namedtuple
from datetime import datetime

import string
import sys
import re
import os

class EntityField:
  def __init__(self, *args):
    self.is_key = args[0] == '@key'
    self.field_type = args[1]
    self.field_name = args[2]
    self.default_value = args[3] if args[3] else None

  def __repr__(self):
    return '%s: %s (default=%s) %s' % (self.field_name, self.field_type, self.default_value, 'KEY' if self.is_key else '')


JAVA_MODEL_TEMPLATE = """
// Autogenerated on ${build_date}
package ${entity_ns};

import java.util.BitSet;

import com.gullivernet.goal.services.storage.StorageService.TableRowKeyField;
import com.gullivernet.goal.services.storage.StorageTable.StorageTableRow;
import com.gullivernet.goal.services.client.auth.model.ApiKeySecretAlgo;
import com.gullivernet.commons.security.PasswordUtil.PasswordAlgo;

public class ${entity_name} implements StorageTableRow {
  private final transient BitSet changes = new BitSet(${fields_count});

  // key members
  ${members_key}

  // field members
  ${members_field}

  // ===== ctor ========================================================
  public ${entity_name}() {
    // no-op
  }

  public ${entity_name}(final ${entity_name} other) {
    ${ctor_copy}
  }

  // ===== Setters & Getters ========================================================
  public ${entity_name} resetChanges() {
    changes.clear();
    return this;
  }

  ${getter_setter}

  // ===== Util =====================================================================
  @Override
  public String toString() {
    ${entity_string}
  }
}
"""

JAVA_GETTER_SETTER_TEMPLATE = """
  // ----- ${field_name} field -----
  public boolean is${camel_field_name}Changed() {
    return changes.get(${field_index});
  }

  public ${field_type} get${camel_field_name}() {
    return this.${field_name};
  }

  public ${entity_name} set${camel_field_name}(final ${field_type} value) {
    this.changes.set(${field_index});
    this.${field_name} = value;
    return this;
  }
"""

def replaceTemplateVars(template, templateFields):
  template = template
  for k, v in templateFields.items():
    # it's not easy to do something worse...
    template = template.replace('${%s}' % k, str(v))
  return template

def _generateJavaCtorCopy(fields):
  copyFields = []
  for f in fields:
    camelFieldName = f.field_name[0].upper() + f.field_name[1:]
    copyFields.append('set%s(other.get%s());' % (camelFieldName, camelFieldName))
  return '\n    '.join(copyFields)

def _generateJavaModelToString(entityName, fields):
  entityData = []
  for f in fields:
    entityData.append("%s='\" + this.%s + \"'" % (f.field_name, f.field_name))
  return 'return "%s [%s]";' % (entityName, ', '.join(entityData))

def _generateJavaSettersAndGetters(entityName, fields):
  code = []
  for index, f in enumerate(fields):
    templateVars = {
      'camel_field_name': f.field_name[0].upper() + f.field_name[1:],
      'field_name': f.field_name,
      'field_index': index,
      'field_type': f.field_type,
      'entity_name': entityName
    }
    code.append(replaceTemplateVars(JAVA_GETTER_SETTER_TEMPLATE, templateVars))

  return '\n  '.join(code)

def _generateJavaModelMembers(fields):
  keys = []
  members = []
  for f in fields:
    code = ''
    if f.is_key:
      code += '@TableRowKeyField(index = %d) ' % len(keys)

    code += 'private %s %s' % (f.field_type, f.field_name)
    if f.default_value:
      code += ' = %s' % f.default_value
    code += ';'

    if f.is_key:
      keys.append(code)
    else:
      members.append(code)

  return {
    'members_key': '\n  '.join(keys),
    'members_field': '\n  '.join(members)
  }

def generateJavaModel(entityNs, entityName, fields):
  templateFields = {
    'build_date': str(datetime.now()),
    'entity_ns': entityNs,
    'entity_name': entityName,
    'fields_count': len(fields),
    'ctor_copy': _generateJavaCtorCopy(fields),
    'getter_setter': _generateJavaSettersAndGetters(entityName, fields),
    'entity_string': _generateJavaModelToString(entityName, fields)
  }
  templateFields.update(_generateJavaModelMembers(fields))
  return replaceTemplateVars(JAVA_MODEL_TEMPLATE, templateFields)

def removeComments(text):
  text = re.sub(re.compile("/\*.*?\*/", re.DOTALL ), '',text) # remove all occurrences streamed comments (/*COMMENT */) from string
  text = re.sub(re.compile("//.*?\n" ), '', text) # remove all occurrence single-line comments (//COMMENT\n ) from string
  return text

if __name__ == '__main__':
  if len(sys.argv) < 3:
    print('StorageModelGenerator <code dir> <model>')
    sys.exit(1)

  FIELD_REGEX = r'(@\S*)*\s*(\S+)\s+(\S+)\s*=?\s*(\S*);'
  ENTITY_REGEX = r'(\S+)\s*[^{]*{\s*([^}]+)\s*}'

  for modelFile in sys.argv[2:]:
    with open(modelFile, 'r') as fd:
      entitiesConfig = fd.read()

    print('reading %s' % modelFile)
    entitiesConfig = removeComments(entitiesConfig)
    for entityFullName, entityFields in re.findall(ENTITY_REGEX, entitiesConfig):
      nsIndex = entityFullName.rindex('.')
      entityNs = entityFullName[:nsIndex]
      entityName = entityFullName[nsIndex + 1:]
      fields = [EntityField(*field) for field in re.findall(FIELD_REGEX, entityFields)]

      print(entityFields)
      print(fields)

      javaModel = generateJavaModel(entityNs, entityName, fields)
      javaModelPath = '%s.java' % os.path.join(sys.argv[1], entityNs.replace('.', '/'), entityName)
      with open(javaModelPath, 'w') as fd: fd.write(javaModel)
      print(' - generate into %s' % javaModelPath)


