package tech.dnaco.data.encoding;

public class IntArrayEncoder {
  private IntArrayEncoder() {
    // no-op
  }

  private static String dumpSeq(final int[] data, final int offset, final int length) {
    final StringBuilder builder = new StringBuilder();
    builder.append('[');
    long minValue = Long.MAX_VALUE;
    long maxValue = Long.MIN_VALUE;
    for (int i = 0; i < length; ++i) {
      final long v = data[offset + i];
      minValue = Math.min(minValue, v);
      maxValue = Math.max(maxValue, v);
      if (i > 0) builder.append(", ");
      builder.append(v);
    }
    builder.append("] min:").append(minValue);
    builder.append(" max:").append(maxValue);
    builder.append(" delta:").append(maxValue - minValue);
    return builder.toString();
  }

  private interface SeqMatcher {
    void reset(long value);
    boolean update(long value);
  }

  private static class SameSeqMatcher implements SeqMatcher {
    private long lastValue;

    @Override
    public void reset(final long value) {
      this.lastValue = value;
    }

    @Override
    public boolean update(final long value) {
      final boolean same = (lastValue == value);
      this.lastValue = value;
      return same;
    }

    @Override
    public String toString() {
      return "SameSeqMatcher";
    }
  }

  private static class MaxWidthSeqMatcher implements SeqMatcher {
    private final long maxWidth;
    private long minValue;
    private long maxValue;

    public MaxWidthSeqMatcher(final long maxWidth) {
      this.maxWidth = maxWidth;
    }

    @Override
    public void reset(final long value) {
      this.minValue = value;
      this.maxValue = value;
    }

    @Override
    public boolean update(final long value) {
      if (value >= maxValue) {
        this.maxValue = value;
      } else if (value < minValue) {
        this.minValue = value;
      }
      return getWidth(maxValue - minValue) <= maxWidth;
    }

    private static int getWidth(final long v) {
      return 64 - Long.numberOfLeadingZeros(v);
    }

    @Override
    public String toString() {
      return "WidthSeqMatcher(" + maxWidth + ")";
    }
  }

  public static void findBestSeq(final int[] data) {
    findBestSeq(data, 0, data.length, new SeqMatcher[] {
      new SameSeqMatcher(),
      new MaxWidthSeqMatcher(2),
      new MaxWidthSeqMatcher(4),
      new MaxWidthSeqMatcher(8),
      new MaxWidthSeqMatcher(16),
      new MaxWidthSeqMatcher(24),
      new MaxWidthSeqMatcher(32),
      new MaxWidthSeqMatcher(40),
      new MaxWidthSeqMatcher(48),
      new MaxWidthSeqMatcher(56),
      new MaxWidthSeqMatcher(64),
    }, 0);
  }

  public static void findBestSeq(final int[] data, int offset, final int endOffset, final SeqMatcher[] matchers, final int level) {
    if (level == matchers.length) {
      System.out.println(dumpSeq(data, offset, endOffset - offset) + " <=== EOF " + matchers[level - 1]);
      return;
    }

    final SeqMatcher seqMatcher = matchers[level];

    int lastSerieOffset = offset;
    while (offset < endOffset) {
      int seqLength = 1;
      seqMatcher.reset(data[offset]);
      for (int i = offset + 1; i < endOffset && seqMatcher.update(data[i]); ++i) {
        seqLength++;
      }

      if (seqLength >= 3) {
        if ((offset - lastSerieOffset) > 0) {
          findBestSeq(data, lastSerieOffset, offset, matchers, level + 1);
        }
        System.out.println(dumpSeq(data, offset, seqLength) + " <=== " + seqMatcher);
        lastSerieOffset = offset + seqLength;
      }
      offset += seqLength;
    }
    if ((offset - lastSerieOffset) > 0) {
      findBestSeq(data, lastSerieOffset, offset, matchers, level + 1);
    }
  }

  public static void main(final String[] args) {
    final int[] data = new int[] {
      2901, 3179, 2366, 1946, 1502, 1263, 1447, 4443, 24636, 77498, 86306, 88554,
      149587, 271646, 370618, 365967, 318277, 312603, 263178, 167610, 79513, 31869, 10784, 4173, 5436, 4347, 3555,
      3049, 2836, 2956, 3089, 5316, 22966, 76243, 90703, 82441, 132620, 255654, 390258, 411863, 377952, 369522,
      322223, 217569, 115296, 47000, 15507, 4710, 5200, 4749, 4213, 3532, 3204, 3144, 3179, 5595, 22356, 76408, 91627,
      84498, 137119, 266637, 396286, 401159, 365803, 357069, 307270, 200658, 104251, 40105, 13442, 3692, 5942, 3841,
      3213, 2546, 2256, 2136, 2249, 4678, 22170, 76760, 88785, 82696, 136647, 263518, 392066, 390100, 352973, 338458,
      294393, 187891, 94204, 36488, 11243, 3650, 4643, 4084, 3332, 2661, 2417, 2261, 2321, 3620, 19319, 72863, 85930,
      79475, 137474, 259119, 376761, 375140, 336661, 316905, 273445, 173392, 81740, 30024, 8348, 2641, 2517, 2018,
      1354, 1281, 887, 605, 597, 726, 2064, 6144, 10559, 13721, 21848, 36176, 42868, 39603, 33851, 22952, 13361, 5668,
      2179, 1258, 729, 586, 1242, 858, 775, 688, 505, 352, 277, 280, 320, 366, 454, 682, 920, 760, 755, 726, 563, 614,
      596, 744, 1231, 1295, 1550, 2866
    };

    final int[] data1 = new int[] {
      908, 885, 860, 843, 820, 809, 786, 759, 732, 708, 690, 668, 643, 617, 591, 566, 542,
      522, 499, 479, 458, 432, 397, 372, 345, 322, 297, 267, 240, 216, 197, 173, 145, 123, 95, 68, 46, 18,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1001, 978, 954, 927, 903, 880, 858, 832, 811, 784, 757, 732, 708,
      681, 662, 639, 613, 587, 562, 538, 515, 491, 468, 445, 421, 399, 379, 359, 334, 309, 290, 266, 247,
      228, 209, 185, 163, 140, 110, 86, 59, 38, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 947, 928, 904, 880, 868, 850,
      828, 809, 790, 766, 739, 716, 693, 669, 651, 626, 600, 579, 553, 526, 502, 477, 456, 432, 412, 384, 359,
      336, 311, 288, 262, 242, 221, 200, 181, 160, 138, 117, 94, 69, 44, 22, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      941, 926, 907, 886, 864, 843, 826, 806, 786, 768, 748, 729, 710, 687, 666, 643, 622, 599, 594, 594, 594,
      594, 594, 594, 594, 594, 594, 594, 594, 594, 593, 593, 582, 559, 536, 515, 490, 466, 446, 424, 403, 383,
      357, 335, 315, 288, 266, 244, 221, 200, 176, 152, 130, 108, 85, 63, 41, 20, 0, 0, 861, 844, 831, 808, 790,
      775, 755, 737, 715, 693, 670, 656, 638, 616, 597, 575, 562, 546, 532, 514, 499, 476, 455, 431, 407, 382,
      358, 331, 307, 286, 262, 243, 223, 197, 177, 158, 143, 120, 99, 75, 52, 32, 15,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 861, 848, 827, 809, 797, 779, 762, 744, 724, 702, 680, 663, 643, 625,
      610, 588, 724, 706, 685, 660, 641, 623, 606, 583, 558, 534, 510, 489, 463, 441, 415, 552, 536, 519, 503,
      483, 466, 441, 418, 394, 377, 356, 339, 315, 288, 267, 256, 405, 392, 371, 348, 324, 302, 282, 260, 236,
      216, 188, 165, 136, 113, 253, 231, 217, 197, 170, 143, 124, 100, 75, 48, 32, 10, 0, 0, 232, 208, 184, 162,
      141, 119, 100, 78, 56, 30, 8, 0, 0, 0, 0, 0, 203, 181, 157, 139, 116, 92, 70, 42, 17, 0, 0, 0, 0, 265,
      241, 215, 189, 166, 143, 122, 101, 78, 53, 31, 9, 0, 0, 0, 223, 204, 186, 162, 140, 115, 91, 74, 51, 27,
      8, 0, 0, 0, 0, 222, 197, 175, 156, 131, 106, 80, 55, 34, 12, 0, 0, 0, 0, 249, 230, 208, 183, 160, 137,
      114, 93, 71, 47, 24, 4, 0, 0, 0, 232, 208, 185, 162, 145, 120, 98, 79, 53, 29, 6, 0, 0, 0, 242, 225, 205,
      180, 157, 132, 112, 90, 74, 49, 30, 9, 0, 0, 0, 0, 205, 179, 159, 141, 119, 97, 72, 50, 29, 10,
      0, 0, 0, 0, 220, 200, 176, 152, 131, 116
    };

    final int[] data2 = new int[] {
      495, 1755, 41590, 22829, 14110, 0, 25838, 32407, 26307, 27537, 21751, 27934, 24221, 22195, 27653, 21384, 28267, 26309, 21781, 24310, 20934, 17948, 24339, 21750, 17214, 6561, 3147, 2350, 2386, 2590, 2323, 2618, 2403, 2367, 2523, 2689, 2103, 2173, 2683, 2174, 2383, 2346, 2397, 3354, 2478, 2775, 2219, 2482, 2194, 2619, 2465, 2400, 2108, 2052, 2370, 2077, 2247, 2248, 2596, 1954, 2141, 2032, 2150, 2226, 1874, 2374, 2226, 2171, 2335, 1888, 2355, 2091, 2159, 2131, 2228, 2193, 2074, 1895, 1749, 2064, 2307, 2122, 2063, 1783, 1906, 2133, 2011, 2173, 1885, 1797, 1878, 2026, 2089, 1798, 1687, 1718, 1825, 2126, 1963, 1994, 1717, 1762, 1794, 1697, 2282, 2381, 1507, 1632, 1817, 1874, 1734, 1789, 1981, 1647, 1548, 1730, 1905, 1706, 1597, 1808, 1740, 1746, 1632, 1625, 1423, 1565, 1516, 1557, 1668, 1475, 1567, 1514, 1636, 1532, 1863, 1384, 1378, 1801, 1446, 1383, 1487, 1309, 1126, 1479, 1217, 1358, 1341, 1577, 1413, 1420, 1180, 1402, 1420, 1168, 1457, 1262, 1152, 1244, 1228, 1298, 1283, 1529, 1513, 1337, 1370, 1173, 1456, 1115, 1068, 1316, 1677, 1369, 1215, 1316, 1400, 1133, 922, 1198, 1167, 1003, 1135, 1095, 1241, 970, 806, 1071, 918, 900, 1106, 763, 985, 826, 817, 691, 1013, 859, 800, 1101, 690, 995, 592, 982, 723, 732, 1085, 1035, 1138, 641, 861, 806, 812, 943, 792, 669, 541, 501, 787, 612, 837, 648, 735, 558, 586, 661, 473, 685, 597, 662, 676, 972, 742, 592, 1076, 722, 731, 796, 452, 537, 532, 443, 581, 534, 366, 610, 451, 626, 557, 387, 548, 579, 521, 379, 328, 419, 420, 672, 297, 452, 358, 718, 312, 322, 321, 289, 327, 401, 397, 715, 475, 348, 234, 207, 287, 226, 258, 186, 193, 231, 211, 236, 200, 276, 236, 242, 142, 304, 275, 395, 146, 140, 197, 284, 163, 226, 186, 100, 161, 216, 258, 73, 223, 134, 236, 127, 132, 262, 205, 170, 318, 93, 91, 59, 84, 62, 198, 100, 78, 484, 243, 142, 91, 89, 60, 51, 67, 98, 76, 66, 64, 80, 32, 142, 250, 50, 147, 56, 93, 14, 29, 24, 87, 14, 268, 59, 11, 75, 99, 37, 92, 87, 216, 4, 96, 9, 8, 11, 2, 208, 120, 1, 0, 2, 63, 0, 0, 6, 0, 0, 2, 0, 492, 8, 8, 30, 12, 0, 2, 3, 2, 172, 20, 3, 21, 53, 1, 0, 1, 7, 0, 49, 321, 3, 0, 3, 5, 64, 2, 53, 2, 0, 1, 11, 196, 4, 23, 12, 6, 5, 9, 9, 18, 4, 9, 7, 5, 12, 5, 158, 5, 6, 59, 7, 4, 6, 4, 6, 7, 7, 7, 7, 158, 7, 123, 147, 245, 104, 2, 5, 0, 29, 7, 3, 0, 3, 5, 222, 4, 3, 0, 2, 4, 4, 4, 4, 0, 2, 3, 6, 7, 5, 5, 172, 4, 3
    };

    final int[] dataX = new int[] {
        1, 2,
        0, 0, 0, 0, 0,
        3, 4, 5, 7,
        25, 21, 27, 29
    };

    final int[] dataY = new int[] {
      2901, 3179, 2366, 1946, 1502, 1263, 1447, 4443, 24636, 77498, 86306, 88554, 149587, 271646, 370618, 365967,
      318277, 312603, 263178, 167610, 79513, 31869, 10784, 4173, 5436, 4347, 3555, 3049, 2836, 2956, 3089, 5316,
      22966, 76243, 90703, 82441, 132620, 255654, 390258, 411863, 377952, 369522, 322223, 217569, 115296, 47000, 15507,
      4710, 5200, 4749, 4213, 3532, 3204, 3144, 3179, 5595, 22356, 76408, 91627, 84498, 137119, 266637, 396286, 401159, 365803,
      357069, 307270, 200658, 104251, 40105, 13442, 3692, 5942, 3841, 3213, 2546, 2256, 2136, 2249, 4678, 22170, 76760, 88785,
      82696, 136647, 263518, 392066, 390100, 352973, 338458, 294393, 187891, 94204, 36488, 11243, 3650, 4643, 4084, 3332, 2661,
      2417, 2261, 2321, 3620, 19319, 72863, 85930, 79475, 137474, 259119, 376761, 375140, 336661, 316905, 273445, 173392, 81740,
      30024, 8348, 2641, 2517, 2018, 1354, 1281, 887, 605, 597, 726, 2064, 6144, 10559, 13721, 21848, 36176, 42868, 39603, 33851,
      22952, 13361, 5668, 2179, 1258, 729, 586, 1242, 858, 775, 688, 505, 352, 277, 280, 320, 366, 454, 682, 920, 760, 755, 726, 563,
      614, 596, 744, 1231, 1295, 1550, 2866
    };

    findBestSeq(dataY);
  }
}
